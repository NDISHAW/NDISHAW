{"ast":null,"code":"import { operate } from '../util/lift';\nimport { innerFrom } from '../observable/innerFrom';\nimport { createOperatorSubscriber } from './OperatorSubscriber';\nexport function audit(durationSelector) {\n  return operate(function (source, subscriber) {\n    var hasValue = false;\n    var lastValue = null;\n    var durationSubscriber = null;\n    var isComplete = false;\n\n    var endDuration = function endDuration() {\n      durationSubscriber === null || durationSubscriber === void 0 ? void 0 : durationSubscriber.unsubscribe();\n      durationSubscriber = null;\n\n      if (hasValue) {\n        hasValue = false;\n        var value = lastValue;\n        lastValue = null;\n        subscriber.next(value);\n      }\n\n      isComplete && subscriber.complete();\n    };\n\n    var cleanupDuration = function cleanupDuration() {\n      durationSubscriber = null;\n      isComplete && subscriber.complete();\n    };\n\n    source.subscribe(createOperatorSubscriber(subscriber, function (value) {\n      hasValue = true;\n      lastValue = value;\n\n      if (!durationSubscriber) {\n        innerFrom(durationSelector(value)).subscribe(durationSubscriber = createOperatorSubscriber(subscriber, endDuration, cleanupDuration));\n      }\n    }, function () {\n      isComplete = true;\n      (!hasValue || !durationSubscriber || durationSubscriber.closed) && subscriber.complete();\n    }));\n  });\n}","map":{"version":3,"mappings":"AAGA,SAASA,OAAT,QAAwB,cAAxB;AACA,SAASC,SAAT,QAA0B,yBAA1B;AACA,SAASC,wBAAT,QAAyC,sBAAzC;AA+CA,OAAM,SAAUC,KAAV,CAAmBC,gBAAnB,EAAuE;EAC3E,OAAOJ,OAAO,CAAC,UAACK,MAAD,EAASC,UAAT,EAAmB;IAChC,IAAIC,QAAQ,GAAG,KAAf;IACA,IAAIC,SAAS,GAAa,IAA1B;IACA,IAAIC,kBAAkB,GAA2B,IAAjD;IACA,IAAIC,UAAU,GAAG,KAAjB;;IAEA,IAAMC,WAAW,GAAG,SAAdA,WAAc;MAClBF,kBAAkB,SAAlB,sBAAkB,WAAlB,GAAkB,MAAlB,qBAAkB,CAAEG,WAApB;MACAH,kBAAkB,GAAG,IAArB;;MACA,IAAIF,QAAJ,EAAc;QACZA,QAAQ,GAAG,KAAX;QACA,IAAMM,KAAK,GAAGL,SAAd;QACAA,SAAS,GAAG,IAAZ;QACAF,UAAU,CAACQ,IAAX,CAAgBD,KAAhB;MACD;;MACDH,UAAU,IAAIJ,UAAU,CAACS,QAAX,EAAd;IACD,CAVD;;IAYA,IAAMC,eAAe,GAAG,SAAlBA,eAAkB;MACtBP,kBAAkB,GAAG,IAArB;MACAC,UAAU,IAAIJ,UAAU,CAACS,QAAX,EAAd;IACD,CAHD;;IAKAV,MAAM,CAACY,SAAP,CACEf,wBAAwB,CACtBI,UADsB,EAEtB,UAACO,KAAD,EAAM;MACJN,QAAQ,GAAG,IAAX;MACAC,SAAS,GAAGK,KAAZ;;MACA,IAAI,CAACJ,kBAAL,EAAyB;QACvBR,SAAS,CAACG,gBAAgB,CAACS,KAAD,CAAjB,CAAT,CAAmCI,SAAnC,CACGR,kBAAkB,GAAGP,wBAAwB,CAACI,UAAD,EAAaK,WAAb,EAA0BK,eAA1B,CADhD;MAGD;IACF,CAVqB,EAWtB;MACEN,UAAU,GAAG,IAAb;MACA,CAAC,CAACH,QAAD,IAAa,CAACE,kBAAd,IAAoCA,kBAAkB,CAACS,MAAxD,KAAmEZ,UAAU,CAACS,QAAX,EAAnE;IACD,CAdqB,CAD1B;EAkBD,CAzCa,CAAd;AA0CD","names":["operate","innerFrom","createOperatorSubscriber","audit","durationSelector","source","subscriber","hasValue","lastValue","durationSubscriber","isComplete","endDuration","unsubscribe","value","next","complete","cleanupDuration","subscribe","closed"],"sources":["/home/ndishaw/Documents/coding/CODE/NDISHAW/node_modules/rxjs/src/internal/operators/audit.ts"],"sourcesContent":["import { Subscriber } from '../Subscriber';\nimport { MonoTypeOperatorFunction, ObservableInput } from '../types';\n\nimport { operate } from '../util/lift';\nimport { innerFrom } from '../observable/innerFrom';\nimport { createOperatorSubscriber } from './OperatorSubscriber';\n\n/**\n * Ignores source values for a duration determined by another Observable, then\n * emits the most recent value from the source Observable, then repeats this\n * process.\n *\n * <span class=\"informal\">It's like {@link auditTime}, but the silencing\n * duration is determined by a second Observable.</span>\n *\n * ![](audit.svg)\n *\n * `audit` is similar to `throttle`, but emits the last value from the silenced\n * time window, instead of the first value. `audit` emits the most recent value\n * from the source Observable on the output Observable as soon as its internal\n * timer becomes disabled, and ignores source values while the timer is enabled.\n * Initially, the timer is disabled. As soon as the first source value arrives,\n * the timer is enabled by calling the `durationSelector` function with the\n * source value, which returns the \"duration\" Observable. When the duration\n * Observable emits a value, the timer is disabled, then the most\n * recent source value is emitted on the output Observable, and this process\n * repeats for the next source value.\n *\n * ## Example\n *\n * Emit clicks at a rate of at most one click per second\n *\n * ```ts\n * import { fromEvent, audit, interval } from 'rxjs';\n *\n * const clicks = fromEvent(document, 'click');\n * const result = clicks.pipe(audit(ev => interval(1000)));\n * result.subscribe(x => console.log(x));\n * ```\n *\n * @see {@link auditTime}\n * @see {@link debounce}\n * @see {@link delayWhen}\n * @see {@link sample}\n * @see {@link throttle}\n *\n * @param durationSelector A function\n * that receives a value from the source Observable, for computing the silencing\n * duration, returned as an Observable or a Promise.\n * @return A function that returns an Observable that performs rate-limiting of\n * emissions from the source Observable.\n */\nexport function audit<T>(durationSelector: (value: T) => ObservableInput<any>): MonoTypeOperatorFunction<T> {\n  return operate((source, subscriber) => {\n    let hasValue = false;\n    let lastValue: T | null = null;\n    let durationSubscriber: Subscriber<any> | null = null;\n    let isComplete = false;\n\n    const endDuration = () => {\n      durationSubscriber?.unsubscribe();\n      durationSubscriber = null;\n      if (hasValue) {\n        hasValue = false;\n        const value = lastValue!;\n        lastValue = null;\n        subscriber.next(value);\n      }\n      isComplete && subscriber.complete();\n    };\n\n    const cleanupDuration = () => {\n      durationSubscriber = null;\n      isComplete && subscriber.complete();\n    };\n\n    source.subscribe(\n      createOperatorSubscriber(\n        subscriber,\n        (value) => {\n          hasValue = true;\n          lastValue = value;\n          if (!durationSubscriber) {\n            innerFrom(durationSelector(value)).subscribe(\n              (durationSubscriber = createOperatorSubscriber(subscriber, endDuration, cleanupDuration))\n            );\n          }\n        },\n        () => {\n          isComplete = true;\n          (!hasValue || !durationSubscriber || durationSubscriber.closed) && subscriber.complete();\n        }\n      )\n    );\n  });\n}\n"]},"metadata":{},"sourceType":"module"}