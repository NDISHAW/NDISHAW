{"ast":null,"code":"import { Subject } from '../Subject';\nimport { asyncScheduler } from '../scheduler/async';\nimport { Subscription } from '../Subscription';\nimport { operate } from '../util/lift';\nimport { createOperatorSubscriber } from './OperatorSubscriber';\nimport { arrRemove } from '../util/arrRemove';\nimport { popScheduler } from '../util/args';\nimport { executeSchedule } from '../util/executeSchedule';\nexport function windowTime(windowTimeSpan) {\n  var _a, _b;\n\n  var otherArgs = [];\n\n  for (var _i = 1; _i < arguments.length; _i++) {\n    otherArgs[_i - 1] = arguments[_i];\n  }\n\n  var scheduler = (_a = popScheduler(otherArgs)) !== null && _a !== void 0 ? _a : asyncScheduler;\n  var windowCreationInterval = (_b = otherArgs[0]) !== null && _b !== void 0 ? _b : null;\n  var maxWindowSize = otherArgs[1] || Infinity;\n  return operate(function (source, subscriber) {\n    var windowRecords = [];\n    var restartOnClose = false;\n\n    var closeWindow = function closeWindow(record) {\n      var window = record.window,\n          subs = record.subs;\n      window.complete();\n      subs.unsubscribe();\n      arrRemove(windowRecords, record);\n      restartOnClose && startWindow();\n    };\n\n    var startWindow = function startWindow() {\n      if (windowRecords) {\n        var subs = new Subscription();\n        subscriber.add(subs);\n        var window_1 = new Subject();\n        var record_1 = {\n          window: window_1,\n          subs: subs,\n          seen: 0\n        };\n        windowRecords.push(record_1);\n        subscriber.next(window_1.asObservable());\n        executeSchedule(subs, scheduler, function () {\n          return closeWindow(record_1);\n        }, windowTimeSpan);\n      }\n    };\n\n    if (windowCreationInterval !== null && windowCreationInterval >= 0) {\n      executeSchedule(subscriber, scheduler, startWindow, windowCreationInterval, true);\n    } else {\n      restartOnClose = true;\n    }\n\n    startWindow();\n\n    var loop = function loop(cb) {\n      return windowRecords.slice().forEach(cb);\n    };\n\n    var terminate = function terminate(cb) {\n      loop(function (_a) {\n        var window = _a.window;\n        return cb(window);\n      });\n      cb(subscriber);\n      subscriber.unsubscribe();\n    };\n\n    source.subscribe(createOperatorSubscriber(subscriber, function (value) {\n      loop(function (record) {\n        record.window.next(value);\n        maxWindowSize <= ++record.seen && closeWindow(record);\n      });\n    }, function () {\n      return terminate(function (consumer) {\n        return consumer.complete();\n      });\n    }, function (err) {\n      return terminate(function (consumer) {\n        return consumer.error(err);\n      });\n    }));\n    return function () {\n      windowRecords = null;\n    };\n  });\n}","map":{"version":3,"mappings":"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","names":["Subject","asyncScheduler","Subscription","operate","createOperatorSubscriber","arrRemove","popScheduler","executeSchedule","windowTime","windowTimeSpan","otherArgs","scheduler","_a","windowCreationInterval","_b","maxWindowSize","Infinity","source","subscriber","windowRecords","restartOnClose","closeWindow","record","subs","window","complete","unsubscribe","startWindow","add","window_1","record_1","seen","push","next","asObservable","loop","cb","slice","forEach","terminate","subscribe","value","consumer","err","error"],"sources":["/home/ndishaw/Documents/coding/CODE/NDISHAW/node_modules/rxjs/src/internal/operators/windowTime.ts"],"sourcesContent":["import { Subject } from '../Subject';\nimport { asyncScheduler } from '../scheduler/async';\nimport { Observable } from '../Observable';\nimport { Subscription } from '../Subscription';\nimport { Observer, OperatorFunction, SchedulerLike } from '../types';\nimport { operate } from '../util/lift';\nimport { createOperatorSubscriber } from './OperatorSubscriber';\nimport { arrRemove } from '../util/arrRemove';\nimport { popScheduler } from '../util/args';\nimport { executeSchedule } from '../util/executeSchedule';\n\nexport function windowTime<T>(windowTimeSpan: number, scheduler?: SchedulerLike): OperatorFunction<T, Observable<T>>;\nexport function windowTime<T>(\n  windowTimeSpan: number,\n  windowCreationInterval: number,\n  scheduler?: SchedulerLike\n): OperatorFunction<T, Observable<T>>;\nexport function windowTime<T>(\n  windowTimeSpan: number,\n  windowCreationInterval: number | null | void,\n  maxWindowSize: number,\n  scheduler?: SchedulerLike\n): OperatorFunction<T, Observable<T>>;\n\n/**\n * Branch out the source Observable values as a nested Observable periodically\n * in time.\n *\n * <span class=\"informal\">It's like {@link bufferTime}, but emits a nested\n * Observable instead of an array.</span>\n *\n * ![](windowTime.png)\n *\n * Returns an Observable that emits windows of items it collects from the source\n * Observable. The output Observable starts a new window periodically, as\n * determined by the `windowCreationInterval` argument. It emits each window\n * after a fixed timespan, specified by the `windowTimeSpan` argument. When the\n * source Observable completes or encounters an error, the output Observable\n * emits the current window and propagates the notification from the source\n * Observable. If `windowCreationInterval` is not provided, the output\n * Observable starts a new window when the previous window of duration\n * `windowTimeSpan` completes. If `maxWindowCount` is provided, each window\n * will emit at most fixed number of values. Window will complete immediately\n * after emitting last value and next one still will open as specified by\n * `windowTimeSpan` and `windowCreationInterval` arguments.\n *\n * ## Examples\n *\n * In every window of 1 second each, emit at most 2 click events\n *\n * ```ts\n * import { fromEvent, windowTime, map, take, mergeAll } from 'rxjs';\n *\n * const clicks = fromEvent(document, 'click');\n * const result = clicks.pipe(\n *   windowTime(1000),\n *   map(win => win.pipe(take(2))), // take at most 2 emissions from each window\n *   mergeAll()                     // flatten the Observable-of-Observables\n * );\n * result.subscribe(x => console.log(x));\n * ```\n *\n * Every 5 seconds start a window 1 second long, and emit at most 2 click events per window\n *\n * ```ts\n * import { fromEvent, windowTime, map, take, mergeAll } from 'rxjs';\n *\n * const clicks = fromEvent(document, 'click');\n * const result = clicks.pipe(\n *   windowTime(1000, 5000),\n *   map(win => win.pipe(take(2))), // take at most 2 emissions from each window\n *   mergeAll()                     // flatten the Observable-of-Observables\n * );\n * result.subscribe(x => console.log(x));\n * ```\n *\n * Same as example above but with `maxWindowCount` instead of `take`\n *\n * ```ts\n * import { fromEvent, windowTime, mergeAll } from 'rxjs';\n *\n * const clicks = fromEvent(document, 'click');\n * const result = clicks.pipe(\n *   windowTime(1000, 5000, 2), // take at most 2 emissions from each window\n *   mergeAll()                 // flatten the Observable-of-Observables\n * );\n * result.subscribe(x => console.log(x));\n * ```\n *\n * @see {@link window}\n * @see {@link windowCount}\n * @see {@link windowToggle}\n * @see {@link windowWhen}\n * @see {@link bufferTime}\n *\n * @param windowTimeSpan The amount of time, in milliseconds, to fill each window.\n * @param windowCreationInterval The interval at which to start new\n * windows.\n * @param maxWindowSize Max number of\n * values each window can emit before completion.\n * @param scheduler The scheduler on which to schedule the\n * intervals that determine window boundaries.\n * @return A function that returns an Observable of windows, which in turn are\n * Observables.\n */\nexport function windowTime<T>(windowTimeSpan: number, ...otherArgs: any[]): OperatorFunction<T, Observable<T>> {\n  const scheduler = popScheduler(otherArgs) ?? asyncScheduler;\n  const windowCreationInterval = (otherArgs[0] as number) ?? null;\n  const maxWindowSize = (otherArgs[1] as number) || Infinity;\n\n  return operate((source, subscriber) => {\n    // The active windows, their related subscriptions, and removal functions.\n    let windowRecords: WindowRecord<T>[] | null = [];\n    // If true, it means that every time we close a window, we want to start a new window.\n    // This is only really used for when *just* the time span is passed.\n    let restartOnClose = false;\n\n    const closeWindow = (record: { window: Subject<T>; subs: Subscription }) => {\n      const { window, subs } = record;\n      window.complete();\n      subs.unsubscribe();\n      arrRemove(windowRecords, record);\n      restartOnClose && startWindow();\n    };\n\n    /**\n     * Called every time we start a new window. This also does\n     * the work of scheduling the job to close the window.\n     */\n    const startWindow = () => {\n      if (windowRecords) {\n        const subs = new Subscription();\n        subscriber.add(subs);\n        const window = new Subject<T>();\n        const record = {\n          window,\n          subs,\n          seen: 0,\n        };\n        windowRecords.push(record);\n        subscriber.next(window.asObservable());\n        executeSchedule(subs, scheduler, () => closeWindow(record), windowTimeSpan);\n      }\n    };\n\n    if (windowCreationInterval !== null && windowCreationInterval >= 0) {\n      // The user passed both a windowTimeSpan (required), and a creation interval\n      // That means we need to start new window on the interval, and those windows need\n      // to wait the required time span before completing.\n      executeSchedule(subscriber, scheduler, startWindow, windowCreationInterval, true);\n    } else {\n      restartOnClose = true;\n    }\n\n    startWindow();\n\n    /**\n     * We need to loop over a copy of the window records several times in this operator.\n     * This is to save bytes over the wire more than anything.\n     * The reason we copy the array is that reentrant code could mutate the array while\n     * we are iterating over it.\n     */\n    const loop = (cb: (record: WindowRecord<T>) => void) => windowRecords!.slice().forEach(cb);\n\n    /**\n     * Used to notify all of the windows and the subscriber in the same way\n     * in the error and complete handlers.\n     */\n    const terminate = (cb: (consumer: Observer<any>) => void) => {\n      loop(({ window }) => cb(window));\n      cb(subscriber);\n      subscriber.unsubscribe();\n    };\n\n    source.subscribe(\n      createOperatorSubscriber(\n        subscriber,\n        (value: T) => {\n          // Notify all windows of the value.\n          loop((record) => {\n            record.window.next(value);\n            // If the window is over the max size, we need to close it.\n            maxWindowSize <= ++record.seen && closeWindow(record);\n          });\n        },\n        // Complete the windows and the downstream subscriber and clean up.\n        () => terminate((consumer) => consumer.complete()),\n        // Notify the windows and the downstream subscriber of the error and clean up.\n        (err) => terminate((consumer) => consumer.error(err))\n      )\n    );\n\n    // Additional finalization. This will be called when the\n    // destination tears down. Other finalizations are registered implicitly\n    // above via subscription.\n    return () => {\n      // Ensure that the buffer is released.\n      windowRecords = null!;\n    };\n  });\n}\n\ninterface WindowRecord<T> {\n  seen: number;\n  window: Subject<T>;\n  subs: Subscription;\n}\n"]},"metadata":{},"sourceType":"module"}