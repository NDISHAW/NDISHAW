{"ast":null,"code":"import { BehaviorSubject } from '../BehaviorSubject';\nimport { ConnectableObservable } from '../observable/ConnectableObservable';\nexport function publishBehavior(initialValue) {\n  return function (source) {\n    var subject = new BehaviorSubject(initialValue);\n    return new ConnectableObservable(source, function () {\n      return subject;\n    });\n  };\n}","map":{"version":3,"mappings":"AACA,SAASA,eAAT,QAAgC,oBAAhC;AACA,SAASC,qBAAT,QAAsC,qCAAtC;AAiBA,OAAM,SAAUC,eAAV,CAA6BC,YAA7B,EAA4C;EAEhD,OAAO,UAACC,MAAD,EAAO;IACZ,IAAMC,OAAO,GAAG,IAAIL,eAAJ,CAAuBG,YAAvB,CAAhB;IACA,OAAO,IAAIF,qBAAJ,CAA0BG,MAA1B,EAAkC;MAAM;IAAO,CAA/C,CAAP;EACD,CAHD;AAID","names":["BehaviorSubject","ConnectableObservable","publishBehavior","initialValue","source","subject"],"sources":["/home/ndishaw/Documents/coding/CODE/NDISHAW/ndishaw/node_modules/rxjs/src/internal/operators/publishBehavior.ts"],"sourcesContent":["import { Observable } from '../Observable';\nimport { BehaviorSubject } from '../BehaviorSubject';\nimport { ConnectableObservable } from '../observable/ConnectableObservable';\nimport { UnaryFunction } from '../types';\n\n/**\n * Creates a {@link ConnectableObservable} that utilizes a {@link BehaviorSubject}.\n *\n * @param initialValue The initial value passed to the {@link BehaviorSubject}.\n * @return A function that returns a {@link ConnectableObservable}\n * @deprecated Will be removed in v8. To create a connectable observable that uses a\n * {@link BehaviorSubject} under the hood, use {@link connectable}.\n * `source.pipe(publishBehavior(initValue))` is equivalent to\n * `connectable(source, { connector: () => new BehaviorSubject(initValue), resetOnDisconnect: false })`.\n * If you're using {@link refCount} after `publishBehavior`, use the {@link share} operator instead.\n * `source.pipe(publishBehavior(initValue), refCount())` is equivalent to\n * `source.pipe(share({ connector: () => new BehaviorSubject(initValue), resetOnError: false, resetOnComplete: false, resetOnRefCountZero: false  }))`.\n * Details: https://rxjs.dev/deprecations/multicasting\n */\nexport function publishBehavior<T>(initialValue: T): UnaryFunction<Observable<T>, ConnectableObservable<T>> {\n  // Note that this has *never* supported the selector function.\n  return (source) => {\n    const subject = new BehaviorSubject<T>(initialValue);\n    return new ConnectableObservable(source, () => subject);\n  };\n}\n"]},"metadata":{},"sourceType":"module"}