{"ast":null,"code":"import { config } from '../config';\nvar context = null;\nexport function errorContext(cb) {\n  if (config.useDeprecatedSynchronousErrorHandling) {\n    var isRoot = !context;\n\n    if (isRoot) {\n      context = {\n        errorThrown: false,\n        error: null\n      };\n    }\n\n    cb();\n\n    if (isRoot) {\n      var _a = context,\n          errorThrown = _a.errorThrown,\n          error = _a.error;\n      context = null;\n\n      if (errorThrown) {\n        throw error;\n      }\n    }\n  } else {\n    cb();\n  }\n}\nexport function captureError(err) {\n  if (config.useDeprecatedSynchronousErrorHandling && context) {\n    context.errorThrown = true;\n    context.error = err;\n  }\n}","map":{"version":3,"mappings":"AAAA,SAASA,MAAT,QAAuB,WAAvB;AAEA,IAAIC,OAAO,GAAgD,IAA3D;AASA,OAAM,SAAUC,YAAV,CAAuBC,EAAvB,EAAqC;EACzC,IAAIH,MAAM,CAACI,qCAAX,EAAkD;IAChD,IAAMC,MAAM,GAAG,CAACJ,OAAhB;;IACA,IAAII,MAAJ,EAAY;MACVJ,OAAO,GAAG;QAAEK,WAAW,EAAE,KAAf;QAAsBC,KAAK,EAAE;MAA7B,CAAV;IACD;;IACDJ,EAAE;;IACF,IAAIE,MAAJ,EAAY;MACJ,SAAyBJ,OAAzB;MAAA,IAAEK,WAAW,iBAAb;MAAA,IAAeC,KAAK,WAApB;MACNN,OAAO,GAAG,IAAV;;MACA,IAAIK,WAAJ,EAAiB;QACf,MAAMC,KAAN;MACD;IACF;EACF,CAbD,MAaO;IAGLJ,EAAE;EACH;AACF;AAMD,OAAM,SAAUK,YAAV,CAAuBC,GAAvB,EAA+B;EACnC,IAAIT,MAAM,CAACI,qCAAP,IAAgDH,OAApD,EAA6D;IAC3DA,OAAO,CAACK,WAAR,GAAsB,IAAtB;IACAL,OAAO,CAACM,KAAR,GAAgBE,GAAhB;EACD;AACF","names":["config","context","errorContext","cb","useDeprecatedSynchronousErrorHandling","isRoot","errorThrown","error","captureError","err"],"sources":["/home/ndishaw/Documents/coding/CODE/NDISHAW/ndishaw/node_modules/rxjs/src/internal/util/errorContext.ts"],"sourcesContent":["import { config } from '../config';\n\nlet context: { errorThrown: boolean; error: any } | null = null;\n\n/**\n * Handles dealing with errors for super-gross mode. Creates a context, in which\n * any synchronously thrown errors will be passed to {@link captureError}. Which\n * will record the error such that it will be rethrown after the call back is complete.\n * TODO: Remove in v8\n * @param cb An immediately executed function.\n */\nexport function errorContext(cb: () => void) {\n  if (config.useDeprecatedSynchronousErrorHandling) {\n    const isRoot = !context;\n    if (isRoot) {\n      context = { errorThrown: false, error: null };\n    }\n    cb();\n    if (isRoot) {\n      const { errorThrown, error } = context!;\n      context = null;\n      if (errorThrown) {\n        throw error;\n      }\n    }\n  } else {\n    // This is the general non-deprecated path for everyone that\n    // isn't crazy enough to use super-gross mode (useDeprecatedSynchronousErrorHandling)\n    cb();\n  }\n}\n\n/**\n * Captures errors only in super-gross mode.\n * @param err the error to capture\n */\nexport function captureError(err: any) {\n  if (config.useDeprecatedSynchronousErrorHandling && context) {\n    context.errorThrown = true;\n    context.error = err;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}