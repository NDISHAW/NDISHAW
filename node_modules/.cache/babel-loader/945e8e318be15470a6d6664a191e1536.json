{"ast":null,"code":"import { operate } from '../util/lift';\nimport { noop } from '../util/noop';\nimport { createOperatorSubscriber } from './OperatorSubscriber';\nexport function buffer(closingNotifier) {\n  return operate(function (source, subscriber) {\n    var currentBuffer = [];\n    source.subscribe(createOperatorSubscriber(subscriber, function (value) {\n      return currentBuffer.push(value);\n    }, function () {\n      subscriber.next(currentBuffer);\n      subscriber.complete();\n    }));\n    closingNotifier.subscribe(createOperatorSubscriber(subscriber, function () {\n      var b = currentBuffer;\n      currentBuffer = [];\n      subscriber.next(b);\n    }, noop));\n    return function () {\n      currentBuffer = null;\n    };\n  });\n}","map":{"version":3,"mappings":"AAEA,SAASA,OAAT,QAAwB,cAAxB;AACA,SAASC,IAAT,QAAqB,cAArB;AACA,SAASC,wBAAT,QAAyC,sBAAzC;AAuCA,OAAM,SAAUC,MAAV,CAAoBC,eAApB,EAAoD;EACxD,OAAOJ,OAAO,CAAC,UAACK,MAAD,EAASC,UAAT,EAAmB;IAEhC,IAAIC,aAAa,GAAQ,EAAzB;IAGAF,MAAM,CAACG,SAAP,CACEN,wBAAwB,CACtBI,UADsB,EAEtB,UAACG,KAAD,EAAM;MAAK,oBAAa,CAACC,IAAd,CAAmBD,KAAnB;IAAyB,CAFd,EAGtB;MACEH,UAAU,CAACK,IAAX,CAAgBJ,aAAhB;MACAD,UAAU,CAACM,QAAX;IACD,CANqB,CAD1B;IAYAR,eAAe,CAACI,SAAhB,CACEN,wBAAwB,CACtBI,UADsB,EAEtB;MAEE,IAAMO,CAAC,GAAGN,aAAV;MACAA,aAAa,GAAG,EAAhB;MACAD,UAAU,CAACK,IAAX,CAAgBE,CAAhB;IACD,CAPqB,EAQtBZ,IARsB,CAD1B;IAaA,OAAO;MAELM,aAAa,GAAG,IAAhB;IACD,CAHD;EAID,CAlCa,CAAd;AAmCD","names":["operate","noop","createOperatorSubscriber","buffer","closingNotifier","source","subscriber","currentBuffer","subscribe","value","push","next","complete","b"],"sources":["/home/ndishaw/Documents/coding/CODE/NDISHAW/node_modules/rxjs/src/internal/operators/buffer.ts"],"sourcesContent":["import { Observable } from '../Observable';\nimport { OperatorFunction } from '../types';\nimport { operate } from '../util/lift';\nimport { noop } from '../util/noop';\nimport { createOperatorSubscriber } from './OperatorSubscriber';\n\n/**\n * Buffers the source Observable values until `closingNotifier` emits.\n *\n * <span class=\"informal\">Collects values from the past as an array, and emits\n * that array only when another Observable emits.</span>\n *\n * ![](buffer.png)\n *\n * Buffers the incoming Observable values until the given `closingNotifier`\n * Observable emits a value, at which point it emits the buffer on the output\n * Observable and starts a new buffer internally, awaiting the next time\n * `closingNotifier` emits.\n *\n * ## Example\n *\n * On every click, emit array of most recent interval events\n *\n * ```ts\n * import { fromEvent, interval, buffer } from 'rxjs';\n *\n * const clicks = fromEvent(document, 'click');\n * const intervalEvents = interval(1000);\n * const buffered = intervalEvents.pipe(buffer(clicks));\n * buffered.subscribe(x => console.log(x));\n * ```\n *\n * @see {@link bufferCount}\n * @see {@link bufferTime}\n * @see {@link bufferToggle}\n * @see {@link bufferWhen}\n * @see {@link window}\n *\n * @param {Observable<any>} closingNotifier An Observable that signals the\n * buffer to be emitted on the output Observable.\n * @return A function that returns an Observable of buffers, which are arrays\n * of values.\n */\nexport function buffer<T>(closingNotifier: Observable<any>): OperatorFunction<T, T[]> {\n  return operate((source, subscriber) => {\n    // The current buffered values.\n    let currentBuffer: T[] = [];\n\n    // Subscribe to our source.\n    source.subscribe(\n      createOperatorSubscriber(\n        subscriber,\n        (value) => currentBuffer.push(value),\n        () => {\n          subscriber.next(currentBuffer);\n          subscriber.complete();\n        }\n      )\n    );\n\n    // Subscribe to the closing notifier.\n    closingNotifier.subscribe(\n      createOperatorSubscriber(\n        subscriber,\n        () => {\n          // Start a new buffer and emit the previous one.\n          const b = currentBuffer;\n          currentBuffer = [];\n          subscriber.next(b);\n        },\n        noop\n      )\n    );\n\n    return () => {\n      // Ensure buffered values are released on finalization.\n      currentBuffer = null!;\n    };\n  });\n}\n"]},"metadata":{},"sourceType":"module"}