{"ast":null,"code":"import { TOTAL_SCREENS } from \"./commonUtils\";\nimport { Subject } from \"rxjs\";\nexport default class ScrollService {\n  //lets have a constructor here and add the scroll event to window\n  constructor() {\n    /* SCROLL TO HIRE ME / CONTACT ME SCREEN */\n    this.scrollToHireMe = () => {\n      let contactMeScreen = document.getElementById(\"ContactMe\");\n      if (!contactMeScreen) return;\n      contactMeScreen.scrollIntoView({\n        behavior: \"smooth\"\n      });\n    };\n    this.scrollToHome = () => {\n      let homeScreen = document.getElementById(\"Home\");\n      if (!homeScreen) return;\n      homeScreen.scrollIntoView({\n        behavior: \"smooth\"\n      });\n    };\n    /* CHECK IF ELEMENT IS IN VIEW .this simply means if the document appears fully on the screen or not */\n    this.isElementInView = (elem, type) => {\n      let rec = elem.getBoundingClientRect();\n      //this method returns a DOMRect object providing information about the size of an element and its position relative to the viewport.\n      // the view port  refers to the part of the document you're viewing which is currently visible in its window\n      let elementTop = rec.top;\n      let elemBottom = rec.bottom;\n\n      /* when the element is Partially Visible */\n      let partiallyVisible = elementTop < window.innerHeight && elemBottom >= 0;\n\n      /* Completely Visible */\n      let completelyVisible = elementTop >= 0 && elemBottom <= window.innerHeight;\n      switch (type) {\n        case \"partial\":\n          return partiallyVisible;\n        case \"complete\":\n          return completelyVisible;\n        default:\n          return false;\n      }\n    };\n    /* CHECK THE SCREEN THATS CURRENTLY UNDER VIEWPORT */\n    // which means the screen that is displayed fully\n    this.checkCurrentScreenUnderViewport = event => {\n      if (!event || Object.keys(event).length < 1) return;\n      for (let screen of TOTAL_SCREENS) {\n        let screenFromDOM = document.getElementById(screen.screen_name);\n        if (!screenFromDOM) continue;\n        let fullyVisible = this.isElementInView(screenFromDOM, \"complete\");\n        let partiallyVisible = this.isElementInView(screenFromDOM, \"partial\");\n        if (fullyVisible || partiallyVisible) {\n          if (partiallyVisible && !screen.alreadyRendered) {\n            //BROADCAST FADE IN EFFECT\n            ScrollService.currentScreenFadeIn.next({\n              fadeInScreen: screen.screen_name\n            });\n            screen[\"alreadyRendered\"] = true;\n            break;\n          }\n          if (fullyVisible) {\n            // BROADCAST SCREEN NAME\n            ScrollService.currentScreenBroadcaster.next({\n              screenInView: screen.screen_name\n            });\n            break;\n          }\n        }\n      }\n    };\n    /* ADD SCROLL EVENT TO WINDOW */\n    window.addEventListener(\"scroll\", this.checkCurrentScreenUnderViewport);\n  }\n}\n/* SINGLETON CLASS INSTANCE */\nScrollService.scrollHandler = new ScrollService();\n/* Lets instantiate the subject BROADCASTERS */\nScrollService.currentScreenBroadcaster = new Subject();\nScrollService.currentScreenFadeIn = new Subject();","map":{"version":3,"names":["TOTAL_SCREENS","Subject","ScrollService","constructor","scrollToHireMe","contactMeScreen","document","getElementById","scrollIntoView","behavior","scrollToHome","homeScreen","isElementInView","elem","type","rec","getBoundingClientRect","elementTop","top","elemBottom","bottom","partiallyVisible","window","innerHeight","completelyVisible","checkCurrentScreenUnderViewport","event","Object","keys","length","screen","screenFromDOM","screen_name","fullyVisible","alreadyRendered","currentScreenFadeIn","next","fadeInScreen","currentScreenBroadcaster","screenInView","addEventListener","scrollHandler"],"sources":["/home/ndishaw/Documents/coding/CODE/NDISHAW/src/utilities/ScrollService.js"],"sourcesContent":["import { TOTAL_SCREENS } from \"./commonUtils\";\nimport { Subject } from \"rxjs\";\n\nexport default class ScrollService {\n  /* SINGLETON CLASS INSTANCE */\n  static scrollHandler = new ScrollService();\n\n  /* Lets instantiate the subject BROADCASTERS */\n  static currentScreenBroadcaster = new Subject();\n  static currentScreenFadeIn = new Subject();\n\n  //lets have a constructor here and add the scroll event to window\n  constructor() {\n    /* ADD SCROLL EVENT TO WINDOW */\n    window.addEventListener(\"scroll\", this.checkCurrentScreenUnderViewport);\n  }\n\n  /* SCROLL TO HIRE ME / CONTACT ME SCREEN */\n  scrollToHireMe = () => {\n    let contactMeScreen = document.getElementById(\"ContactMe\");\n    if (!contactMeScreen) return;\n\n    contactMeScreen.scrollIntoView({ behavior: \"smooth\" });\n  };\n  scrollToHome = () => {\n    let homeScreen = document.getElementById(\"Home\");\n    if (!homeScreen) return;\n    homeScreen.scrollIntoView({ behavior: \"smooth\" });\n  };\n\n  /* CHECK IF ELEMENT IS IN VIEW .this simply means if the document appears fully on the screen or not */\n  isElementInView = (elem, type) => {\n    let rec = elem.getBoundingClientRect();\n    //this method returns a DOMRect object providing information about the size of an element and its position relative to the viewport.\n    // the view port  refers to the part of the document you're viewing which is currently visible in its window\n    let elementTop = rec.top;\n    let elemBottom = rec.bottom;\n\n    /* when the element is Partially Visible */\n    let partiallyVisible = elementTop < window.innerHeight && elemBottom >= 0;\n\n    /* Completely Visible */\n    let completelyVisible = elementTop >= 0 && elemBottom <= window.innerHeight;\n\n    switch (type) {\n      case \"partial\":\n        return partiallyVisible;\n\n      case \"complete\":\n        return completelyVisible;\n\n      default:\n        return false;\n    }\n  };\n\n  /* CHECK THE SCREEN THATS CURRENTLY UNDER VIEWPORT */\n  // which means the screen that is displayed fully\n  checkCurrentScreenUnderViewport = (event) => {\n    if (!event || Object.keys(event).length < 1) return;\n\n    for (let screen of TOTAL_SCREENS) {\n      let screenFromDOM = document.getElementById(screen.screen_name);\n      if (!screenFromDOM) continue;\n\n      let fullyVisible = this.isElementInView(screenFromDOM, \"complete\");\n      let partiallyVisible = this.isElementInView(screenFromDOM, \"partial\");\n\n      if (fullyVisible || partiallyVisible) {\n        if (partiallyVisible && !screen.alreadyRendered) {\n          //BROADCAST FADE IN EFFECT\n          ScrollService.currentScreenFadeIn.next({\n            fadeInScreen: screen.screen_name,\n          });\n          screen[\"alreadyRendered\"] = true;\n          break;\n        }\n\n        if (fullyVisible) {\n          // BROADCAST SCREEN NAME\n          ScrollService.currentScreenBroadcaster.next({\n            screenInView: screen.screen_name,\n          });\n          break;\n        }\n      }\n    }\n  };\n}\n"],"mappings":"AAAA,SAASA,aAAa,QAAQ,eAAe;AAC7C,SAASC,OAAO,QAAQ,MAAM;AAE9B,eAAe,MAAMC,aAAa,CAAC;EAQjC;EACAC,WAAWA,CAAA,EAAG;IAKd;IAAA,KACAC,cAAc,GAAG,MAAM;MACrB,IAAIC,eAAe,GAAGC,QAAQ,CAACC,cAAc,CAAC,WAAW,CAAC;MAC1D,IAAI,CAACF,eAAe,EAAE;MAEtBA,eAAe,CAACG,cAAc,CAAC;QAAEC,QAAQ,EAAE;MAAS,CAAC,CAAC;IACxD,CAAC;IAAA,KACDC,YAAY,GAAG,MAAM;MACnB,IAAIC,UAAU,GAAGL,QAAQ,CAACC,cAAc,CAAC,MAAM,CAAC;MAChD,IAAI,CAACI,UAAU,EAAE;MACjBA,UAAU,CAACH,cAAc,CAAC;QAAEC,QAAQ,EAAE;MAAS,CAAC,CAAC;IACnD,CAAC;IAED;IAAA,KACAG,eAAe,GAAG,CAACC,IAAI,EAAEC,IAAI,KAAK;MAChC,IAAIC,GAAG,GAAGF,IAAI,CAACG,qBAAqB,EAAE;MACtC;MACA;MACA,IAAIC,UAAU,GAAGF,GAAG,CAACG,GAAG;MACxB,IAAIC,UAAU,GAAGJ,GAAG,CAACK,MAAM;;MAE3B;MACA,IAAIC,gBAAgB,GAAGJ,UAAU,GAAGK,MAAM,CAACC,WAAW,IAAIJ,UAAU,IAAI,CAAC;;MAEzE;MACA,IAAIK,iBAAiB,GAAGP,UAAU,IAAI,CAAC,IAAIE,UAAU,IAAIG,MAAM,CAACC,WAAW;MAE3E,QAAQT,IAAI;QACV,KAAK,SAAS;UACZ,OAAOO,gBAAgB;QAEzB,KAAK,UAAU;UACb,OAAOG,iBAAiB;QAE1B;UACE,OAAO,KAAK;MAAC;IAEnB,CAAC;IAED;IACA;IAAA,KACAC,+BAA+B,GAAIC,KAAK,IAAK;MAC3C,IAAI,CAACA,KAAK,IAAIC,MAAM,CAACC,IAAI,CAACF,KAAK,CAAC,CAACG,MAAM,GAAG,CAAC,EAAE;MAE7C,KAAK,IAAIC,MAAM,IAAI9B,aAAa,EAAE;QAChC,IAAI+B,aAAa,GAAGzB,QAAQ,CAACC,cAAc,CAACuB,MAAM,CAACE,WAAW,CAAC;QAC/D,IAAI,CAACD,aAAa,EAAE;QAEpB,IAAIE,YAAY,GAAG,IAAI,CAACrB,eAAe,CAACmB,aAAa,EAAE,UAAU,CAAC;QAClE,IAAIV,gBAAgB,GAAG,IAAI,CAACT,eAAe,CAACmB,aAAa,EAAE,SAAS,CAAC;QAErE,IAAIE,YAAY,IAAIZ,gBAAgB,EAAE;UACpC,IAAIA,gBAAgB,IAAI,CAACS,MAAM,CAACI,eAAe,EAAE;YAC/C;YACAhC,aAAa,CAACiC,mBAAmB,CAACC,IAAI,CAAC;cACrCC,YAAY,EAAEP,MAAM,CAACE;YACvB,CAAC,CAAC;YACFF,MAAM,CAAC,iBAAiB,CAAC,GAAG,IAAI;YAChC;UACF;UAEA,IAAIG,YAAY,EAAE;YAChB;YACA/B,aAAa,CAACoC,wBAAwB,CAACF,IAAI,CAAC;cAC1CG,YAAY,EAAET,MAAM,CAACE;YACvB,CAAC,CAAC;YACF;UACF;QACF;MACF;IACF,CAAC;IA1EC;IACAV,MAAM,CAACkB,gBAAgB,CAAC,QAAQ,EAAE,IAAI,CAACf,+BAA+B,CAAC;EACzE;AAyEF;AApFE;AADmBvB,aAAa,CAEzBuC,aAAa,GAAG,IAAIvC,aAAa,EAAE;AAE1C;AAJmBA,aAAa,CAKzBoC,wBAAwB,GAAG,IAAIrC,OAAO,EAAE;AAL5BC,aAAa,CAMzBiC,mBAAmB,GAAG,IAAIlC,OAAO,EAAE"},"metadata":{},"sourceType":"module","externalDependencies":[]}