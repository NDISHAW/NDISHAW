{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { Scheduler } from '../Scheduler';\n\nvar AsyncScheduler = function (_super) {\n  __extends(AsyncScheduler, _super);\n\n  function AsyncScheduler(SchedulerAction, now) {\n    if (now === void 0) {\n      now = Scheduler.now;\n    }\n\n    var _this = _super.call(this, SchedulerAction, now) || this;\n\n    _this.actions = [];\n    _this._active = false;\n    _this._scheduled = undefined;\n    return _this;\n  }\n\n  AsyncScheduler.prototype.flush = function (action) {\n    var actions = this.actions;\n\n    if (this._active) {\n      actions.push(action);\n      return;\n    }\n\n    var error;\n    this._active = true;\n\n    do {\n      if (error = action.execute(action.state, action.delay)) {\n        break;\n      }\n    } while (action = actions.shift());\n\n    this._active = false;\n\n    if (error) {\n      while (action = actions.shift()) {\n        action.unsubscribe();\n      }\n\n      throw error;\n    }\n  };\n\n  return AsyncScheduler;\n}(Scheduler);\n\nexport { AsyncScheduler };","map":{"version":3,"mappings":";AAAA,SAASA,SAAT,QAA0B,cAA1B;;AAIA;EAAoCC;;EAkBlC,wBAAYC,eAAZ,EAA4CC,GAA5C,EAA6E;IAAjC;MAAAA,MAAoBH,SAAS,CAACG,GAA9B;IAAiC;;IAA7E,YACEC,kBAAMF,eAAN,EAAuBC,GAAvB,KAA2B,IAD7B;;IAjBOE,gBAAmC,EAAnC;IAOAA,gBAAmB,KAAnB;IAQAA,mBAAkBC,SAAlB;;EAIN;;EAEMC,iCAAP,UAAaC,MAAb,EAAqC;IAC3B,WAAO,GAAK,KAAIC,OAAhB;;IAER,IAAI,KAAKC,OAAT,EAAkB;MAChBD,OAAO,CAACE,IAAR,CAAaH,MAAb;MACA;IACD;;IAED,IAAII,KAAJ;IACA,KAAKF,OAAL,GAAe,IAAf;;IAEA,GAAG;MACD,IAAKE,KAAK,GAAGJ,MAAM,CAACK,OAAP,CAAeL,MAAM,CAACM,KAAtB,EAA6BN,MAAM,CAACO,KAApC,CAAb,EAA0D;QACxD;MACD;IACF,CAJD,QAIUP,MAAM,GAAGC,OAAO,CAACO,KAAR,EAJnB;;IAMA,KAAKN,OAAL,GAAe,KAAf;;IAEA,IAAIE,KAAJ,EAAW;MACT,OAAQJ,MAAM,GAAGC,OAAO,CAACO,KAAR,EAAjB,EAAoC;QAClCR,MAAM,CAACS,WAAP;MACD;;MACD,MAAML,KAAN;IACD;EACF,CAzBM;;EA0BT;AAAC,CAhDD,CAAoCZ,SAApC","names":["Scheduler","__extends","SchedulerAction","now","_super","_this","undefined","AsyncScheduler","action","actions","_active","push","error","execute","state","delay","shift","unsubscribe"],"sources":["/home/ndishaw/Documents/coding/CODE/NDISHAW/node_modules/rxjs/src/internal/scheduler/AsyncScheduler.ts"],"sourcesContent":["import { Scheduler } from '../Scheduler';\nimport { Action } from './Action';\nimport { AsyncAction } from './AsyncAction';\n\nexport class AsyncScheduler extends Scheduler {\n  public actions: Array<AsyncAction<any>> = [];\n  /**\n   * A flag to indicate whether the Scheduler is currently executing a batch of\n   * queued actions.\n   * @type {boolean}\n   * @internal\n   */\n  public _active: boolean = false;\n  /**\n   * An internal ID used to track the latest asynchronous task such as those\n   * coming from `setTimeout`, `setInterval`, `requestAnimationFrame`, and\n   * others.\n   * @type {any}\n   * @internal\n   */\n  public _scheduled: any = undefined;\n\n  constructor(SchedulerAction: typeof Action, now: () => number = Scheduler.now) {\n    super(SchedulerAction, now);\n  }\n\n  public flush(action: AsyncAction<any>): void {\n    const { actions } = this;\n\n    if (this._active) {\n      actions.push(action);\n      return;\n    }\n\n    let error: any;\n    this._active = true;\n\n    do {\n      if ((error = action.execute(action.state, action.delay))) {\n        break;\n      }\n    } while ((action = actions.shift()!)); // exhaust the scheduler queue\n\n    this._active = false;\n\n    if (error) {\n      while ((action = actions.shift()!)) {\n        action.unsubscribe();\n      }\n      throw error;\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"module"}