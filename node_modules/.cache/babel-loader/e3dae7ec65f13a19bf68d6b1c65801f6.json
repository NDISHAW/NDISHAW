{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { Subject } from './Subject';\n\nvar BehaviorSubject = function (_super) {\n  __extends(BehaviorSubject, _super);\n\n  function BehaviorSubject(_value) {\n    var _this = _super.call(this) || this;\n\n    _this._value = _value;\n    return _this;\n  }\n\n  Object.defineProperty(BehaviorSubject.prototype, \"value\", {\n    get: function () {\n      return this.getValue();\n    },\n    enumerable: false,\n    configurable: true\n  });\n\n  BehaviorSubject.prototype._subscribe = function (subscriber) {\n    var subscription = _super.prototype._subscribe.call(this, subscriber);\n\n    !subscription.closed && subscriber.next(this._value);\n    return subscription;\n  };\n\n  BehaviorSubject.prototype.getValue = function () {\n    var _a = this,\n        hasError = _a.hasError,\n        thrownError = _a.thrownError,\n        _value = _a._value;\n\n    if (hasError) {\n      throw thrownError;\n    }\n\n    this._throwIfClosed();\n\n    return _value;\n  };\n\n  BehaviorSubject.prototype.next = function (value) {\n    _super.prototype.next.call(this, this._value = value);\n  };\n\n  return BehaviorSubject;\n}(Subject);\n\nexport { BehaviorSubject };","map":{"version":3,"mappings":";AAAA,SAASA,OAAT,QAAwB,WAAxB;;AAUA;EAAwCC;;EACtC,yBAAoBC,MAApB,EAA6B;IAA7B,YACEC,qBAAO,IADT;;IAAoBC;;EAEnB;;EAEDC,sBAAIC,yBAAJ,EAAI,OAAJ,EAAS;SAAT;MACE,OAAO,KAAKC,QAAL,EAAP;IACD,CAFQ;qBAAA;;EAAA,CAAT;;EAKUD,uCAAV,UAAqBE,UAArB,EAA8C;IAC5C,IAAMC,YAAY,GAAGN,iBAAMO,UAAN,CAAgBC,IAAhB,CAAgB,IAAhB,EAAiBH,UAAjB,CAArB;;IACA,CAACC,YAAY,CAACG,MAAd,IAAwBJ,UAAU,CAACK,IAAX,CAAgB,KAAKX,MAArB,CAAxB;IACA,OAAOO,YAAP;EACD,CAJS;;EAMVH;IACQ,SAAoC,IAApC;IAAA,IAAEQ,QAAQ,cAAV;IAAA,IAAYC,WAAW,iBAAvB;IAAA,IAAyBb,MAAM,YAA/B;;IACN,IAAIY,QAAJ,EAAc;MACZ,MAAMC,WAAN;IACD;;IACD,KAAKC,cAAL;;IACA,OAAOd,MAAP;EACD,CAPD;;EASAI,2CAAKW,KAAL,EAAa;IACXd,iBAAMU,IAAN,CAAUF,IAAV,CAAU,IAAV,EAAY,KAAKT,MAAL,GAAce,KAA1B;EACD,CAFD;;EAGF;AAAC,CA5BD,CAAwCjB,OAAxC","names":["Subject","__extends","_value","_super","_this","Object","BehaviorSubject","getValue","subscriber","subscription","_subscribe","call","closed","next","hasError","thrownError","_throwIfClosed","value"],"sources":["/home/ndishaw/Documents/coding/CODE/NDISHAW/ndishaw/node_modules/rxjs/src/internal/BehaviorSubject.ts"],"sourcesContent":["import { Subject } from './Subject';\nimport { Subscriber } from './Subscriber';\nimport { Subscription } from './Subscription';\n\n/**\n * A variant of Subject that requires an initial value and emits its current\n * value whenever it is subscribed to.\n *\n * @class BehaviorSubject<T>\n */\nexport class BehaviorSubject<T> extends Subject<T> {\n  constructor(private _value: T) {\n    super();\n  }\n\n  get value(): T {\n    return this.getValue();\n  }\n\n  /** @internal */\n  protected _subscribe(subscriber: Subscriber<T>): Subscription {\n    const subscription = super._subscribe(subscriber);\n    !subscription.closed && subscriber.next(this._value);\n    return subscription;\n  }\n\n  getValue(): T {\n    const { hasError, thrownError, _value } = this;\n    if (hasError) {\n      throw thrownError;\n    }\n    this._throwIfClosed();\n    return _value;\n  }\n\n  next(value: T): void {\n    super.next((this._value = value));\n  }\n}\n"]},"metadata":{},"sourceType":"module"}