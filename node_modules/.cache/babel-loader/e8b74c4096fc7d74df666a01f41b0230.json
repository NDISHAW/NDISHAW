{"ast":null,"code":"import { __values } from \"tslib\";\nimport { Subscription } from '../Subscription';\nimport { operate } from '../util/lift';\nimport { innerFrom } from '../observable/innerFrom';\nimport { createOperatorSubscriber } from './OperatorSubscriber';\nimport { noop } from '../util/noop';\nimport { arrRemove } from '../util/arrRemove';\nexport function bufferToggle(openings, closingSelector) {\n  return operate(function (source, subscriber) {\n    var buffers = [];\n    innerFrom(openings).subscribe(createOperatorSubscriber(subscriber, function (openValue) {\n      var buffer = [];\n      buffers.push(buffer);\n      var closingSubscription = new Subscription();\n\n      var emitBuffer = function emitBuffer() {\n        arrRemove(buffers, buffer);\n        subscriber.next(buffer);\n        closingSubscription.unsubscribe();\n      };\n\n      closingSubscription.add(innerFrom(closingSelector(openValue)).subscribe(createOperatorSubscriber(subscriber, emitBuffer, noop)));\n    }, noop));\n    source.subscribe(createOperatorSubscriber(subscriber, function (value) {\n      var e_1, _a;\n\n      try {\n        for (var buffers_1 = __values(buffers), buffers_1_1 = buffers_1.next(); !buffers_1_1.done; buffers_1_1 = buffers_1.next()) {\n          var buffer = buffers_1_1.value;\n          buffer.push(value);\n        }\n      } catch (e_1_1) {\n        e_1 = {\n          error: e_1_1\n        };\n      } finally {\n        try {\n          if (buffers_1_1 && !buffers_1_1.done && (_a = buffers_1.return)) _a.call(buffers_1);\n        } finally {\n          if (e_1) throw e_1.error;\n        }\n      }\n    }, function () {\n      while (buffers.length > 0) {\n        subscriber.next(buffers.shift());\n      }\n\n      subscriber.complete();\n    }));\n  });\n}","map":{"version":3,"mappings":";AAAA,SAASA,YAAT,QAA6B,iBAA7B;AAEA,SAASC,OAAT,QAAwB,cAAxB;AACA,SAASC,SAAT,QAA0B,yBAA1B;AACA,SAASC,wBAAT,QAAyC,sBAAzC;AACA,SAASC,IAAT,QAAqB,cAArB;AACA,SAASC,SAAT,QAA0B,mBAA1B;AA6CA,OAAM,SAAUC,YAAV,CACJC,QADI,EAEJC,eAFI,EAE+C;EAEnD,OAAOP,OAAO,CAAC,UAACQ,MAAD,EAASC,UAAT,EAAmB;IAChC,IAAMC,OAAO,GAAU,EAAvB;IAGAT,SAAS,CAACK,QAAD,CAAT,CAAoBK,SAApB,CACET,wBAAwB,CACtBO,UADsB,EAEtB,UAACG,SAAD,EAAU;MACR,IAAMC,MAAM,GAAQ,EAApB;MACAH,OAAO,CAACI,IAAR,CAAaD,MAAb;MAGA,IAAME,mBAAmB,GAAG,IAAIhB,YAAJ,EAA5B;;MAEA,IAAMiB,UAAU,GAAG,SAAbA,UAAa;QACjBZ,SAAS,CAACM,OAAD,EAAUG,MAAV,CAAT;QACAJ,UAAU,CAACQ,IAAX,CAAgBJ,MAAhB;QACAE,mBAAmB,CAACG,WAApB;MACD,CAJD;;MAOAH,mBAAmB,CAACI,GAApB,CAAwBlB,SAAS,CAACM,eAAe,CAACK,SAAD,CAAhB,CAAT,CAAsCD,SAAtC,CAAgDT,wBAAwB,CAACO,UAAD,EAAaO,UAAb,EAAyBb,IAAzB,CAAxE,CAAxB;IACD,CAjBqB,EAkBtBA,IAlBsB,CAD1B;IAuBAK,MAAM,CAACG,SAAP,CACET,wBAAwB,CACtBO,UADsB,EAEtB,UAACW,KAAD,EAAM;;;;QAEJ,KAAqB,mCAAOC,8BAA5B,EAA4B,iBAA5B,EAA4BA,8BAA5B,EAA8B;UAAzB,IAAMR,MAAM,oBAAZ;UACHA,MAAM,CAACC,IAAP,CAAYM,KAAZ;QACD;;;;;;;;;;;;IACF,CAPqB,EAQtB;MAEE,OAAOV,OAAO,CAACY,MAAR,GAAiB,CAAxB,EAA2B;QACzBb,UAAU,CAACQ,IAAX,CAAgBP,OAAO,CAACa,KAAR,EAAhB;MACD;;MACDd,UAAU,CAACe,QAAX;IACD,CAdqB,CAD1B;EAkBD,CA7Ca,CAAd;AA8CD","names":["Subscription","operate","innerFrom","createOperatorSubscriber","noop","arrRemove","bufferToggle","openings","closingSelector","source","subscriber","buffers","subscribe","openValue","buffer","push","closingSubscription","emitBuffer","next","unsubscribe","add","value","buffers_1_1","length","shift","complete"],"sources":["/home/ndishaw/Documents/coding/CODE/NDISHAW/node_modules/rxjs/src/internal/operators/bufferToggle.ts"],"sourcesContent":["import { Subscription } from '../Subscription';\nimport { OperatorFunction, ObservableInput } from '../types';\nimport { operate } from '../util/lift';\nimport { innerFrom } from '../observable/innerFrom';\nimport { createOperatorSubscriber } from './OperatorSubscriber';\nimport { noop } from '../util/noop';\nimport { arrRemove } from '../util/arrRemove';\n\n/**\n * Buffers the source Observable values starting from an emission from\n * `openings` and ending when the output of `closingSelector` emits.\n *\n * <span class=\"informal\">Collects values from the past as an array. Starts\n * collecting only when `opening` emits, and calls the `closingSelector`\n * function to get an Observable that tells when to close the buffer.</span>\n *\n * ![](bufferToggle.png)\n *\n * Buffers values from the source by opening the buffer via signals from an\n * Observable provided to `openings`, and closing and sending the buffers when\n * a Subscribable or Promise returned by the `closingSelector` function emits.\n *\n * ## Example\n *\n * Every other second, emit the click events from the next 500ms\n *\n * ```ts\n * import { fromEvent, interval, bufferToggle, EMPTY } from 'rxjs';\n *\n * const clicks = fromEvent(document, 'click');\n * const openings = interval(1000);\n * const buffered = clicks.pipe(bufferToggle(openings, i =>\n *   i % 2 ? interval(500) : EMPTY\n * ));\n * buffered.subscribe(x => console.log(x));\n * ```\n *\n * @see {@link buffer}\n * @see {@link bufferCount}\n * @see {@link bufferTime}\n * @see {@link bufferWhen}\n * @see {@link windowToggle}\n *\n * @param openings A Subscribable or Promise of notifications to start new\n * buffers.\n * @param closingSelector A function that takes\n * the value emitted by the `openings` observable and returns a Subscribable or Promise,\n * which, when it emits, signals that the associated buffer should be emitted\n * and cleared.\n * @return A function that returns an Observable of arrays of buffered values.\n */\nexport function bufferToggle<T, O>(\n  openings: ObservableInput<O>,\n  closingSelector: (value: O) => ObservableInput<any>\n): OperatorFunction<T, T[]> {\n  return operate((source, subscriber) => {\n    const buffers: T[][] = [];\n\n    // Subscribe to the openings notifier first\n    innerFrom(openings).subscribe(\n      createOperatorSubscriber(\n        subscriber,\n        (openValue) => {\n          const buffer: T[] = [];\n          buffers.push(buffer);\n          // We use this composite subscription, so that\n          // when the closing notifier emits, we can tear it down.\n          const closingSubscription = new Subscription();\n\n          const emitBuffer = () => {\n            arrRemove(buffers, buffer);\n            subscriber.next(buffer);\n            closingSubscription.unsubscribe();\n          };\n\n          // The line below will add the subscription to the parent subscriber *and* the closing subscription.\n          closingSubscription.add(innerFrom(closingSelector(openValue)).subscribe(createOperatorSubscriber(subscriber, emitBuffer, noop)));\n        },\n        noop\n      )\n    );\n\n    source.subscribe(\n      createOperatorSubscriber(\n        subscriber,\n        (value) => {\n          // Value from our source. Add it to all pending buffers.\n          for (const buffer of buffers) {\n            buffer.push(value);\n          }\n        },\n        () => {\n          // Source complete. Emit all pending buffers.\n          while (buffers.length > 0) {\n            subscriber.next(buffers.shift()!);\n          }\n          subscriber.complete();\n        }\n      )\n    );\n  });\n}\n"]},"metadata":{},"sourceType":"module"}