{"ast":null,"code":"import { scheduleObservable } from './scheduleObservable';\nimport { schedulePromise } from './schedulePromise';\nimport { scheduleArray } from './scheduleArray';\nimport { scheduleIterable } from './scheduleIterable';\nimport { scheduleAsyncIterable } from './scheduleAsyncIterable';\nimport { isInteropObservable } from '../util/isInteropObservable';\nimport { isPromise } from '../util/isPromise';\nimport { isArrayLike } from '../util/isArrayLike';\nimport { isIterable } from '../util/isIterable';\nimport { isAsyncIterable } from '../util/isAsyncIterable';\nimport { createInvalidObservableTypeError } from '../util/throwUnobservableError';\nimport { isReadableStreamLike } from '../util/isReadableStreamLike';\nimport { scheduleReadableStreamLike } from './scheduleReadableStreamLike';\nexport function scheduled(input, scheduler) {\n  if (input != null) {\n    if (isInteropObservable(input)) {\n      return scheduleObservable(input, scheduler);\n    }\n\n    if (isArrayLike(input)) {\n      return scheduleArray(input, scheduler);\n    }\n\n    if (isPromise(input)) {\n      return schedulePromise(input, scheduler);\n    }\n\n    if (isAsyncIterable(input)) {\n      return scheduleAsyncIterable(input, scheduler);\n    }\n\n    if (isIterable(input)) {\n      return scheduleIterable(input, scheduler);\n    }\n\n    if (isReadableStreamLike(input)) {\n      return scheduleReadableStreamLike(input, scheduler);\n    }\n  }\n\n  throw createInvalidObservableTypeError(input);\n}","map":{"version":3,"mappings":"AAAA,SAASA,kBAAT,QAAmC,sBAAnC;AACA,SAASC,eAAT,QAAgC,mBAAhC;AACA,SAASC,aAAT,QAA8B,iBAA9B;AACA,SAASC,gBAAT,QAAiC,oBAAjC;AACA,SAASC,qBAAT,QAAsC,yBAAtC;AACA,SAASC,mBAAT,QAAoC,6BAApC;AACA,SAASC,SAAT,QAA0B,mBAA1B;AACA,SAASC,WAAT,QAA4B,qBAA5B;AACA,SAASC,UAAT,QAA2B,oBAA3B;AAGA,SAASC,eAAT,QAAgC,yBAAhC;AACA,SAASC,gCAAT,QAAiD,gCAAjD;AACA,SAASC,oBAAT,QAAqC,8BAArC;AACA,SAASC,0BAAT,QAA2C,8BAA3C;AAaA,OAAM,SAAUC,SAAV,CAAuBC,KAAvB,EAAkDC,SAAlD,EAA0E;EAC9E,IAAID,KAAK,IAAI,IAAb,EAAmB;IACjB,IAAIT,mBAAmB,CAACS,KAAD,CAAvB,EAAgC;MAC9B,OAAOd,kBAAkB,CAACc,KAAD,EAAQC,SAAR,CAAzB;IACD;;IACD,IAAIR,WAAW,CAACO,KAAD,CAAf,EAAwB;MACtB,OAAOZ,aAAa,CAACY,KAAD,EAAQC,SAAR,CAApB;IACD;;IACD,IAAIT,SAAS,CAACQ,KAAD,CAAb,EAAsB;MACpB,OAAOb,eAAe,CAACa,KAAD,EAAQC,SAAR,CAAtB;IACD;;IACD,IAAIN,eAAe,CAACK,KAAD,CAAnB,EAA4B;MAC1B,OAAOV,qBAAqB,CAACU,KAAD,EAAQC,SAAR,CAA5B;IACD;;IACD,IAAIP,UAAU,CAACM,KAAD,CAAd,EAAuB;MACrB,OAAOX,gBAAgB,CAACW,KAAD,EAAQC,SAAR,CAAvB;IACD;;IACD,IAAIJ,oBAAoB,CAACG,KAAD,CAAxB,EAAiC;MAC/B,OAAOF,0BAA0B,CAACE,KAAD,EAAQC,SAAR,CAAjC;IACD;EACF;;EACD,MAAML,gCAAgC,CAACI,KAAD,CAAtC;AACD","names":["scheduleObservable","schedulePromise","scheduleArray","scheduleIterable","scheduleAsyncIterable","isInteropObservable","isPromise","isArrayLike","isIterable","isAsyncIterable","createInvalidObservableTypeError","isReadableStreamLike","scheduleReadableStreamLike","scheduled","input","scheduler"],"sources":["/home/ndishaw/Documents/coding/CODE/NDISHAW/ndishaw/node_modules/rxjs/src/internal/scheduled/scheduled.ts"],"sourcesContent":["import { scheduleObservable } from './scheduleObservable';\nimport { schedulePromise } from './schedulePromise';\nimport { scheduleArray } from './scheduleArray';\nimport { scheduleIterable } from './scheduleIterable';\nimport { scheduleAsyncIterable } from './scheduleAsyncIterable';\nimport { isInteropObservable } from '../util/isInteropObservable';\nimport { isPromise } from '../util/isPromise';\nimport { isArrayLike } from '../util/isArrayLike';\nimport { isIterable } from '../util/isIterable';\nimport { ObservableInput, SchedulerLike } from '../types';\nimport { Observable } from '../Observable';\nimport { isAsyncIterable } from '../util/isAsyncIterable';\nimport { createInvalidObservableTypeError } from '../util/throwUnobservableError';\nimport { isReadableStreamLike } from '../util/isReadableStreamLike';\nimport { scheduleReadableStreamLike } from './scheduleReadableStreamLike';\n\n/**\n * Converts from a common {@link ObservableInput} type to an observable where subscription and emissions\n * are scheduled on the provided scheduler.\n *\n * @see {@link from}\n * @see {@link of}\n *\n * @param input The observable, array, promise, iterable, etc you would like to schedule\n * @param scheduler The scheduler to use to schedule the subscription and emissions from\n * the returned observable.\n */\nexport function scheduled<T>(input: ObservableInput<T>, scheduler: SchedulerLike): Observable<T> {\n  if (input != null) {\n    if (isInteropObservable(input)) {\n      return scheduleObservable(input, scheduler);\n    }\n    if (isArrayLike(input)) {\n      return scheduleArray(input, scheduler);\n    }\n    if (isPromise(input)) {\n      return schedulePromise(input, scheduler);\n    }\n    if (isAsyncIterable(input)) {\n      return scheduleAsyncIterable(input, scheduler);\n    }\n    if (isIterable(input)) {\n      return scheduleIterable(input, scheduler);\n    }\n    if (isReadableStreamLike(input)) {\n      return scheduleReadableStreamLike(input, scheduler);\n    }\n  }\n  throw createInvalidObservableTypeError(input);\n}\n"]},"metadata":{},"sourceType":"module"}