{"ast":null,"code":"import { __extends, __values } from \"tslib\";\nimport { Observable } from './Observable';\nimport { Subscription, EMPTY_SUBSCRIPTION } from './Subscription';\nimport { ObjectUnsubscribedError } from './util/ObjectUnsubscribedError';\nimport { arrRemove } from './util/arrRemove';\nimport { errorContext } from './util/errorContext';\n\nvar Subject = function (_super) {\n  __extends(Subject, _super);\n\n  function Subject() {\n    var _this = _super.call(this) || this;\n\n    _this.closed = false;\n    _this.currentObservers = null;\n    _this.observers = [];\n    _this.isStopped = false;\n    _this.hasError = false;\n    _this.thrownError = null;\n    return _this;\n  }\n\n  Subject.prototype.lift = function (operator) {\n    var subject = new AnonymousSubject(this, this);\n    subject.operator = operator;\n    return subject;\n  };\n\n  Subject.prototype._throwIfClosed = function () {\n    if (this.closed) {\n      throw new ObjectUnsubscribedError();\n    }\n  };\n\n  Subject.prototype.next = function (value) {\n    var _this = this;\n\n    errorContext(function () {\n      var e_1, _a;\n\n      _this._throwIfClosed();\n\n      if (!_this.isStopped) {\n        if (!_this.currentObservers) {\n          _this.currentObservers = Array.from(_this.observers);\n        }\n\n        try {\n          for (var _b = __values(_this.currentObservers), _c = _b.next(); !_c.done; _c = _b.next()) {\n            var observer = _c.value;\n            observer.next(value);\n          }\n        } catch (e_1_1) {\n          e_1 = {\n            error: e_1_1\n          };\n        } finally {\n          try {\n            if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n          } finally {\n            if (e_1) throw e_1.error;\n          }\n        }\n      }\n    });\n  };\n\n  Subject.prototype.error = function (err) {\n    var _this = this;\n\n    errorContext(function () {\n      _this._throwIfClosed();\n\n      if (!_this.isStopped) {\n        _this.hasError = _this.isStopped = true;\n        _this.thrownError = err;\n        var observers = _this.observers;\n\n        while (observers.length) {\n          observers.shift().error(err);\n        }\n      }\n    });\n  };\n\n  Subject.prototype.complete = function () {\n    var _this = this;\n\n    errorContext(function () {\n      _this._throwIfClosed();\n\n      if (!_this.isStopped) {\n        _this.isStopped = true;\n        var observers = _this.observers;\n\n        while (observers.length) {\n          observers.shift().complete();\n        }\n      }\n    });\n  };\n\n  Subject.prototype.unsubscribe = function () {\n    this.isStopped = this.closed = true;\n    this.observers = this.currentObservers = null;\n  };\n\n  Object.defineProperty(Subject.prototype, \"observed\", {\n    get: function () {\n      var _a;\n\n      return ((_a = this.observers) === null || _a === void 0 ? void 0 : _a.length) > 0;\n    },\n    enumerable: false,\n    configurable: true\n  });\n\n  Subject.prototype._trySubscribe = function (subscriber) {\n    this._throwIfClosed();\n\n    return _super.prototype._trySubscribe.call(this, subscriber);\n  };\n\n  Subject.prototype._subscribe = function (subscriber) {\n    this._throwIfClosed();\n\n    this._checkFinalizedStatuses(subscriber);\n\n    return this._innerSubscribe(subscriber);\n  };\n\n  Subject.prototype._innerSubscribe = function (subscriber) {\n    var _this = this;\n\n    var _a = this,\n        hasError = _a.hasError,\n        isStopped = _a.isStopped,\n        observers = _a.observers;\n\n    if (hasError || isStopped) {\n      return EMPTY_SUBSCRIPTION;\n    }\n\n    this.currentObservers = null;\n    observers.push(subscriber);\n    return new Subscription(function () {\n      _this.currentObservers = null;\n      arrRemove(observers, subscriber);\n    });\n  };\n\n  Subject.prototype._checkFinalizedStatuses = function (subscriber) {\n    var _a = this,\n        hasError = _a.hasError,\n        thrownError = _a.thrownError,\n        isStopped = _a.isStopped;\n\n    if (hasError) {\n      subscriber.error(thrownError);\n    } else if (isStopped) {\n      subscriber.complete();\n    }\n  };\n\n  Subject.prototype.asObservable = function () {\n    var observable = new Observable();\n    observable.source = this;\n    return observable;\n  };\n\n  Subject.create = function (destination, source) {\n    return new AnonymousSubject(destination, source);\n  };\n\n  return Subject;\n}(Observable);\n\nexport { Subject };\n\nvar AnonymousSubject = function (_super) {\n  __extends(AnonymousSubject, _super);\n\n  function AnonymousSubject(destination, source) {\n    var _this = _super.call(this) || this;\n\n    _this.destination = destination;\n    _this.source = source;\n    return _this;\n  }\n\n  AnonymousSubject.prototype.next = function (value) {\n    var _a, _b;\n\n    (_b = (_a = this.destination) === null || _a === void 0 ? void 0 : _a.next) === null || _b === void 0 ? void 0 : _b.call(_a, value);\n  };\n\n  AnonymousSubject.prototype.error = function (err) {\n    var _a, _b;\n\n    (_b = (_a = this.destination) === null || _a === void 0 ? void 0 : _a.error) === null || _b === void 0 ? void 0 : _b.call(_a, err);\n  };\n\n  AnonymousSubject.prototype.complete = function () {\n    var _a, _b;\n\n    (_b = (_a = this.destination) === null || _a === void 0 ? void 0 : _a.complete) === null || _b === void 0 ? void 0 : _b.call(_a);\n  };\n\n  AnonymousSubject.prototype._subscribe = function (subscriber) {\n    var _a, _b;\n\n    return (_b = (_a = this.source) === null || _a === void 0 ? void 0 : _a.subscribe(subscriber)) !== null && _b !== void 0 ? _b : EMPTY_SUBSCRIPTION;\n  };\n\n  return AnonymousSubject;\n}(Subject);\n\nexport { AnonymousSubject };","map":{"version":3,"mappings":"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","names":["Observable","Subscription","EMPTY_SUBSCRIPTION","ObjectUnsubscribedError","arrRemove","errorContext","__extends","_super","_this","Subject","operator","subject","AnonymousSubject","closed","value","_throwIfClosed","isStopped","currentObservers","Array","from","observers","_c","observer","next","err","hasError","thrownError","length","shift","error","complete","Object","_a","subscriber","_trySubscribe","call","_checkFinalizedStatuses","_innerSubscribe","push","observable","source","destination","_b","subscribe"],"sources":["/home/ndishaw/Documents/coding/CODE/NDISHAW/ndishaw/node_modules/rxjs/src/internal/Subject.ts"],"sourcesContent":["import { Operator } from './Operator';\nimport { Observable } from './Observable';\nimport { Subscriber } from './Subscriber';\nimport { Subscription, EMPTY_SUBSCRIPTION } from './Subscription';\nimport { Observer, SubscriptionLike, TeardownLogic } from './types';\nimport { ObjectUnsubscribedError } from './util/ObjectUnsubscribedError';\nimport { arrRemove } from './util/arrRemove';\nimport { errorContext } from './util/errorContext';\n\n/**\n * A Subject is a special type of Observable that allows values to be\n * multicasted to many Observers. Subjects are like EventEmitters.\n *\n * Every Subject is an Observable and an Observer. You can subscribe to a\n * Subject, and you can call next to feed values as well as error and complete.\n */\nexport class Subject<T> extends Observable<T> implements SubscriptionLike {\n  closed = false;\n\n  private currentObservers: Observer<T>[] | null = null;\n\n  /** @deprecated Internal implementation detail, do not use directly. Will be made internal in v8. */\n  observers: Observer<T>[] = [];\n  /** @deprecated Internal implementation detail, do not use directly. Will be made internal in v8. */\n  isStopped = false;\n  /** @deprecated Internal implementation detail, do not use directly. Will be made internal in v8. */\n  hasError = false;\n  /** @deprecated Internal implementation detail, do not use directly. Will be made internal in v8. */\n  thrownError: any = null;\n\n  /**\n   * Creates a \"subject\" by basically gluing an observer to an observable.\n   *\n   * @nocollapse\n   * @deprecated Recommended you do not use. Will be removed at some point in the future. Plans for replacement still under discussion.\n   */\n  static create: (...args: any[]) => any = <T>(destination: Observer<T>, source: Observable<T>): AnonymousSubject<T> => {\n    return new AnonymousSubject<T>(destination, source);\n  };\n\n  constructor() {\n    // NOTE: This must be here to obscure Observable's constructor.\n    super();\n  }\n\n  /** @deprecated Internal implementation detail, do not use directly. Will be made internal in v8. */\n  lift<R>(operator: Operator<T, R>): Observable<R> {\n    const subject = new AnonymousSubject(this, this);\n    subject.operator = operator as any;\n    return subject as any;\n  }\n\n  /** @internal */\n  protected _throwIfClosed() {\n    if (this.closed) {\n      throw new ObjectUnsubscribedError();\n    }\n  }\n\n  next(value: T) {\n    errorContext(() => {\n      this._throwIfClosed();\n      if (!this.isStopped) {\n        if (!this.currentObservers) {\n          this.currentObservers = Array.from(this.observers);\n        }\n        for (const observer of this.currentObservers) {\n          observer.next(value);\n        }\n      }\n    });\n  }\n\n  error(err: any) {\n    errorContext(() => {\n      this._throwIfClosed();\n      if (!this.isStopped) {\n        this.hasError = this.isStopped = true;\n        this.thrownError = err;\n        const { observers } = this;\n        while (observers.length) {\n          observers.shift()!.error(err);\n        }\n      }\n    });\n  }\n\n  complete() {\n    errorContext(() => {\n      this._throwIfClosed();\n      if (!this.isStopped) {\n        this.isStopped = true;\n        const { observers } = this;\n        while (observers.length) {\n          observers.shift()!.complete();\n        }\n      }\n    });\n  }\n\n  unsubscribe() {\n    this.isStopped = this.closed = true;\n    this.observers = this.currentObservers = null!;\n  }\n\n  get observed() {\n    return this.observers?.length > 0;\n  }\n\n  /** @internal */\n  protected _trySubscribe(subscriber: Subscriber<T>): TeardownLogic {\n    this._throwIfClosed();\n    return super._trySubscribe(subscriber);\n  }\n\n  /** @internal */\n  protected _subscribe(subscriber: Subscriber<T>): Subscription {\n    this._throwIfClosed();\n    this._checkFinalizedStatuses(subscriber);\n    return this._innerSubscribe(subscriber);\n  }\n\n  /** @internal */\n  protected _innerSubscribe(subscriber: Subscriber<any>) {\n    const { hasError, isStopped, observers } = this;\n    if (hasError || isStopped) {\n      return EMPTY_SUBSCRIPTION;\n    }\n    this.currentObservers = null;\n    observers.push(subscriber);\n    return new Subscription(() => {\n      this.currentObservers = null;\n      arrRemove(observers, subscriber);\n    });\n  }\n\n  /** @internal */\n  protected _checkFinalizedStatuses(subscriber: Subscriber<any>) {\n    const { hasError, thrownError, isStopped } = this;\n    if (hasError) {\n      subscriber.error(thrownError);\n    } else if (isStopped) {\n      subscriber.complete();\n    }\n  }\n\n  /**\n   * Creates a new Observable with this Subject as the source. You can do this\n   * to create customize Observer-side logic of the Subject and conceal it from\n   * code that uses the Observable.\n   * @return {Observable} Observable that the Subject casts to\n   */\n  asObservable(): Observable<T> {\n    const observable: any = new Observable<T>();\n    observable.source = this;\n    return observable;\n  }\n}\n\n/**\n * @class AnonymousSubject<T>\n */\nexport class AnonymousSubject<T> extends Subject<T> {\n  constructor(\n    /** @deprecated Internal implementation detail, do not use directly. Will be made internal in v8. */\n    public destination?: Observer<T>,\n    source?: Observable<T>\n  ) {\n    super();\n    this.source = source;\n  }\n\n  next(value: T) {\n    this.destination?.next?.(value);\n  }\n\n  error(err: any) {\n    this.destination?.error?.(err);\n  }\n\n  complete() {\n    this.destination?.complete?.();\n  }\n\n  /** @internal */\n  protected _subscribe(subscriber: Subscriber<T>): Subscription {\n    return this.source?.subscribe(subscriber) ?? EMPTY_SUBSCRIPTION;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}