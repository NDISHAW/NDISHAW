{"ast":null,"code":"import { Observable } from '../Observable';\nexport function fromSubscribable(subscribable) {\n  return new Observable(function (subscriber) {\n    return subscribable.subscribe(subscriber);\n  });\n}","map":{"version":3,"mappings":"AAAA,SAASA,UAAT,QAA2B,eAA3B;AAcA,OAAM,SAAUC,gBAAV,CAA8BC,YAA9B,EAA2D;EAC/D,OAAO,IAAIF,UAAJ,CAAe,UAACG,UAAD,EAA0B;IAAK,mBAAY,CAACC,SAAb,CAAuBD,UAAvB;EAAkC,CAAhF,CAAP;AACD","names":["Observable","fromSubscribable","subscribable","subscriber","subscribe"],"sources":["/home/ndishaw/Documents/coding/CODE/NDISHAW/node_modules/rxjs/src/internal/observable/fromSubscribable.ts"],"sourcesContent":["import { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { Subscribable } from '../types';\n\n/**\n * Used to convert a subscribable to an observable.\n *\n * Currently, this is only used within internals.\n *\n * TODO: Discuss ObservableInput supporting \"Subscribable\".\n * https://github.com/ReactiveX/rxjs/issues/5909\n *\n * @param subscribable A subscribable\n */\nexport function fromSubscribable<T>(subscribable: Subscribable<T>) {\n  return new Observable((subscriber: Subscriber<T>) => subscribable.subscribe(subscriber));\n}\n"]},"metadata":{},"sourceType":"module"}